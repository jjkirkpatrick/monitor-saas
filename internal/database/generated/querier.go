// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	AcknowledgeAlert(ctx context.Context, arg AcknowledgeAlertParams) (AlertHistory, error)
	CreateAlertConfig(ctx context.Context, arg CreateAlertConfigParams) (AlertConfig, error)
	CreateAlertHistory(ctx context.Context, arg CreateAlertHistoryParams) (AlertHistory, error)
	CreateMonitor(ctx context.Context, arg CreateMonitorParams) (Monitor, error)
	CreateMonitorResult(ctx context.Context, arg CreateMonitorResultParams) (MonitorResult, error)
	DeleteAlertConfig(ctx context.Context, arg DeleteAlertConfigParams) error
	DeleteMonitor(ctx context.Context, arg DeleteMonitorParams) error
	DeleteNotificationPreferences(ctx context.Context, arg DeleteNotificationPreferencesParams) error
	DeleteOldMonitorResults(ctx context.Context, dollar_1 pgtype.Text) error
	GenerateApiKey(ctx context.Context, userID uuid.UUID) (pgtype.Text, error)
	GetActiveAlerts(ctx context.Context, userID uuid.UUID) ([]AlertHistory, error)
	GetAlertConfig(ctx context.Context, arg GetAlertConfigParams) (GetAlertConfigRow, error)
	GetAlertHistory(ctx context.Context, arg GetAlertHistoryParams) (GetAlertHistoryRow, error)
	GetAlertStats(ctx context.Context, userID uuid.UUID) (GetAlertStatsRow, error)
	GetFailedChecks(ctx context.Context, arg GetFailedChecksParams) ([]MonitorResult, error)
	GetLatestMonitorResult(ctx context.Context, monitorID uuid.UUID) (MonitorResult, error)
	GetMonitor(ctx context.Context, arg GetMonitorParams) (Monitor, error)
	GetMonitorCount(ctx context.Context, userID uuid.UUID) (int64, error)
	GetMonitorHourlyStats(ctx context.Context, arg GetMonitorHourlyStatsParams) ([]GetMonitorHourlyStatsRow, error)
	GetMonitorResults(ctx context.Context, arg GetMonitorResultsParams) ([]MonitorResult, error)
	GetMonitorResultsByLocation(ctx context.Context, arg GetMonitorResultsByLocationParams) ([]MonitorResult, error)
	GetMonitorResultsCount(ctx context.Context, arg GetMonitorResultsCountParams) (int64, error)
	GetMonitorStats(ctx context.Context, arg GetMonitorStatsParams) (GetMonitorStatsRow, error)
	GetMonitorStatsGroupedByLocation(ctx context.Context, arg GetMonitorStatsGroupedByLocationParams) ([]GetMonitorStatsGroupedByLocationRow, error)
	GetMonitorTimeSeries(ctx context.Context, arg GetMonitorTimeSeriesParams) ([]GetMonitorTimeSeriesRow, error)
	GetMonitorWithStats(ctx context.Context, arg GetMonitorWithStatsParams) (GetMonitorWithStatsRow, error)
	GetMonitorsByLocation(ctx context.Context, locations []string) ([]Monitor, error)
	GetMonitorsNeedingCheck(ctx context.Context) ([]Monitor, error)
	GetNotificationPreferences(ctx context.Context, arg GetNotificationPreferencesParams) (NotificationPreference, error)
	GetPendingNotifications(ctx context.Context) ([]GetPendingNotificationsRow, error)
	GetUserLimits(ctx context.Context, userID uuid.UUID) (UserLimit, error)
	GetUserMonitoringStats(ctx context.Context, userID uuid.UUID) (GetUserMonitoringStatsRow, error)
	GetUserSettings(ctx context.Context, userID uuid.UUID) (UserSetting, error)
	GetUserUsageStats(ctx context.Context, arg GetUserUsageStatsParams) (UserUsageStat, error)
	GetUserUsageStatsByDateRange(ctx context.Context, arg GetUserUsageStatsByDateRangeParams) ([]GetUserUsageStatsByDateRangeRow, error)
	GetUsersNearingLimits(ctx context.Context) ([]GetUsersNearingLimitsRow, error)
	ListActiveMonitors(ctx context.Context) ([]Monitor, error)
	ListAlertConfigs(ctx context.Context, userID uuid.UUID) ([]AlertConfig, error)
	ListAlertConfigsByMonitor(ctx context.Context, monitorID uuid.UUID) ([]AlertConfig, error)
	ListAlertHistory(ctx context.Context, arg ListAlertHistoryParams) ([]AlertHistory, error)
	ListAlertHistoryByMonitor(ctx context.Context, arg ListAlertHistoryByMonitorParams) ([]AlertHistory, error)
	ListMonitors(ctx context.Context, userID uuid.UUID) ([]Monitor, error)
	ListMonitorsByType(ctx context.Context, arg ListMonitorsByTypeParams) ([]Monitor, error)
	ListNotificationPreferences(ctx context.Context, userID uuid.UUID) ([]NotificationPreference, error)
	MarkNotificationSent(ctx context.Context, id uuid.UUID) error
	RefreshHourlyStats(ctx context.Context) error
	ResolveAlert(ctx context.Context, arg ResolveAlertParams) (AlertHistory, error)
	RevokeApiKey(ctx context.Context, userID uuid.UUID) error
	UpdateAlertConfig(ctx context.Context, arg UpdateAlertConfigParams) (AlertConfig, error)
	UpdateApiKeyLastUsed(ctx context.Context, userID uuid.UUID) error
	UpdateMonitor(ctx context.Context, arg UpdateMonitorParams) (Monitor, error)
	UpdateMonitorStatus(ctx context.Context, arg UpdateMonitorStatusParams) (Monitor, error)
	UpdateUserLimits(ctx context.Context, arg UpdateUserLimitsParams) (UserLimit, error)
	UpdateUserSettings(ctx context.Context, arg UpdateUserSettingsParams) (UserSetting, error)
	UpsertNotificationPreferences(ctx context.Context, arg UpsertNotificationPreferencesParams) (NotificationPreference, error)
	UpsertUserUsageStats(ctx context.Context, arg UpsertUserUsageStatsParams) (UserUsageStat, error)
}

var _ Querier = (*Queries)(nil)
